package mge_data;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.maiguoer.component.http.data.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Integer> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, int.class, "uid", true, "uid");
        public final static Property StoreId = new Property(1, int.class, "storeId", false, "storeId");
        public final static Property Hxname = new Property(2, String.class, "hxname", false, "hxname");
        public final static Property Username = new Property(3, String.class, "username", false, "username");
        public final static Property VipLevel = new Property(4, int.class, "vipLevel", false, "vipLevel");
        public final static Property Company = new Property(5, String.class, "company", false, "company");
        public final static Property Position = new Property(6, String.class, "position", false, "position");
        public final static Property Gender = new Property(7, int.class, "gender", false, "gender");
        public final static Property BornDate = new Property(8, String.class, "bornDate", false, "bornDate");
        public final static Property Constellation = new Property(9, String.class, "constellation", false, "constellation");
        public final static Property MobileVisible = new Property(10, int.class, "mobileVisible", false, "mobileVisible");
        public final static Property Avatar = new Property(11, String.class, "avatar", false, "avatar");
        public final static Property IsSingle = new Property(12, int.class, "isSingle", false, "isSingle");
        public final static Property Occupation = new Property(13, String.class, "occupation", false, "occupation");
        public final static Property Hobby = new Property(14, String.class, "hobby", false, "hobby");
        public final static Property Mobile = new Property(15, String.class, "mobile", false, "mobile");
        public final static Property BornArea = new Property(16, String.class, "bornArea", false, "bornArea");
        public final static Property BirthPeriod = new Property(17, String.class, "birthPeriod", false, "birthPeriod");
        public final static Property BgLikeCount = new Property(18, String.class, "bgLikeCount", false, "bgLikeCount");
        public final static Property BgImage = new Property(19, String.class, "bgImage", false, "bgImage");
        public final static Property AuthStatus = new Property(20, int.class, "authStatus", false, "authStatus");
        public final static Property ResideArea = new Property(21, String.class, "resideArea", false, "resideArea");
        public final static Property ResideCity = new Property(22, String.class, "resideCity", false, "resideCity");
        public final static Property BgLikeStatus = new Property(23, int.class, "bgLikeStatus", false, "bgLikeStatus");
        public final static Property Realname = new Property(24, String.class, "realname", false, "realname");
        public final static Property BusinessAuthStatus = new Property(25, int.class, "businessAuthStatus", false, "businessAuthStatus");
        public final static Property UnionLevel = new Property(26, int.class, "unionLevel", false, "unionLevel");
        public final static Property IsSetSecPassword = new Property(27, int.class, "isSetSecPassword", false, "isSetSecPassword");
        public final static Property ContactsCount = new Property(28, int.class, "contactsCount", false, "contactsCount");
        public final static Property OrderCount = new Property(29, int.class, "orderCount", false, "orderCount");
        public final static Property IsStaff = new Property(30, int.class, "isStaff", false, "isStaff");
        public final static Property UnionCredit = new Property(31, int.class, "unionCredit", false, "unionCredit");
        public final static Property FollowCount = new Property(32, String.class, "followCount", false, "followCount");
        public final static Property FansCount = new Property(33, String.class, "fansCount", false, "fansCount");
        public final static Property ViewCount = new Property(34, String.class, "viewCount", false, "viewCount");
        public final static Property InviteCount = new Property(35, String.class, "inviteCount", false, "inviteCount");
        public final static Property FlowerCount = new Property(36, String.class, "flowerCount", false, "flowerCount");
        public final static Property ImpressionCount = new Property(37, int.class, "impressionCount", false, "impressionCount");
        public final static Property UserAvatars = new Property(38, String.class, "userAvatars", false, "userAvatars");
        public final static Property Chairman = new Property(39, int.class, "chairman", false, "chairman");
        public final static Property UnionMerchant = new Property(40, int.class, "unionMerchant", false, "unionMerchant");
        public final static Property IsWelfare = new Property(41, int.class, "isWelfare", false, "isWelfare");
        public final static Property IsFruitToken = new Property(42, int.class, "isFruitToken", false, "isFruitToken");
        public final static Property ValueLevel = new Property(43, int.class, "valueLevel", false, "valueLevel");
        public final static Property ZoneVodDuration = new Property(44, int.class, "zoneVodDuration", false, "zoneVodDuration");
        public final static Property IsHost = new Property(45, int.class, "isHost", false, "isHost");
        public final static Property IsMaker = new Property(46, int.class, "isMaker", false, "isMaker");
        public final static Property ShowActivityUrl = new Property(47, String.class, "showActivityUrl", false, "showActivityUrl");
        public final static Property VipStatus = new Property(48, int.class, "vipStatus", false, "vipStatus");
        public final static Property InviteUid = new Property(49, int.class, "inviteUid", false, "inviteUid");
        public final static Property MakerLevel = new Property(50, int.class, "makerLevel", false, "makerLevel");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"uid\" INTEGER PRIMARY KEY NOT NULL ," + // 0: uid
                "\"storeId\" INTEGER NOT NULL ," + // 1: storeId
                "\"hxname\" TEXT," + // 2: hxname
                "\"username\" TEXT," + // 3: username
                "\"vipLevel\" INTEGER NOT NULL ," + // 4: vipLevel
                "\"company\" TEXT," + // 5: company
                "\"position\" TEXT," + // 6: position
                "\"gender\" INTEGER NOT NULL ," + // 7: gender
                "\"bornDate\" TEXT," + // 8: bornDate
                "\"constellation\" TEXT," + // 9: constellation
                "\"mobileVisible\" INTEGER NOT NULL ," + // 10: mobileVisible
                "\"avatar\" TEXT," + // 11: avatar
                "\"isSingle\" INTEGER NOT NULL ," + // 12: isSingle
                "\"occupation\" TEXT," + // 13: occupation
                "\"hobby\" TEXT," + // 14: hobby
                "\"mobile\" TEXT," + // 15: mobile
                "\"bornArea\" TEXT," + // 16: bornArea
                "\"birthPeriod\" TEXT," + // 17: birthPeriod
                "\"bgLikeCount\" TEXT," + // 18: bgLikeCount
                "\"bgImage\" TEXT," + // 19: bgImage
                "\"authStatus\" INTEGER NOT NULL ," + // 20: authStatus
                "\"resideArea\" TEXT," + // 21: resideArea
                "\"resideCity\" TEXT," + // 22: resideCity
                "\"bgLikeStatus\" INTEGER NOT NULL ," + // 23: bgLikeStatus
                "\"realname\" TEXT," + // 24: realname
                "\"businessAuthStatus\" INTEGER NOT NULL ," + // 25: businessAuthStatus
                "\"unionLevel\" INTEGER NOT NULL ," + // 26: unionLevel
                "\"isSetSecPassword\" INTEGER NOT NULL ," + // 27: isSetSecPassword
                "\"contactsCount\" INTEGER NOT NULL ," + // 28: contactsCount
                "\"orderCount\" INTEGER NOT NULL ," + // 29: orderCount
                "\"isStaff\" INTEGER NOT NULL ," + // 30: isStaff
                "\"unionCredit\" INTEGER NOT NULL ," + // 31: unionCredit
                "\"followCount\" TEXT," + // 32: followCount
                "\"fansCount\" TEXT," + // 33: fansCount
                "\"viewCount\" TEXT," + // 34: viewCount
                "\"inviteCount\" TEXT," + // 35: inviteCount
                "\"flowerCount\" TEXT," + // 36: flowerCount
                "\"impressionCount\" INTEGER NOT NULL ," + // 37: impressionCount
                "\"userAvatars\" TEXT," + // 38: userAvatars
                "\"chairman\" INTEGER NOT NULL ," + // 39: chairman
                "\"unionMerchant\" INTEGER NOT NULL ," + // 40: unionMerchant
                "\"isWelfare\" INTEGER NOT NULL ," + // 41: isWelfare
                "\"isFruitToken\" INTEGER NOT NULL ," + // 42: isFruitToken
                "\"valueLevel\" INTEGER NOT NULL ," + // 43: valueLevel
                "\"zoneVodDuration\" INTEGER NOT NULL ," + // 44: zoneVodDuration
                "\"isHost\" INTEGER NOT NULL ," + // 45: isHost
                "\"isMaker\" INTEGER NOT NULL ," + // 46: isMaker
                "\"showActivityUrl\" TEXT," + // 47: showActivityUrl
                "\"vipStatus\" INTEGER NOT NULL ," + // 48: vipStatus
                "\"inviteUid\" INTEGER NOT NULL ," + // 49: inviteUid
                "\"makerLevel\" INTEGER NOT NULL );"); // 50: makerLevel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUid());
        stmt.bindLong(2, entity.getStoreId());
 
        String hxname = entity.getHxname();
        if (hxname != null) {
            stmt.bindString(3, hxname);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
        stmt.bindLong(5, entity.getVipLevel());
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(6, company);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(7, position);
        }
        stmt.bindLong(8, entity.getGender());
 
        String bornDate = entity.getBornDate();
        if (bornDate != null) {
            stmt.bindString(9, bornDate);
        }
 
        String constellation = entity.getConstellation();
        if (constellation != null) {
            stmt.bindString(10, constellation);
        }
        stmt.bindLong(11, entity.getMobileVisible());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(12, avatar);
        }
        stmt.bindLong(13, entity.getIsSingle());
 
        String occupation = entity.getOccupation();
        if (occupation != null) {
            stmt.bindString(14, occupation);
        }
 
        String hobby = entity.getHobby();
        if (hobby != null) {
            stmt.bindString(15, hobby);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(16, mobile);
        }
 
        String bornArea = entity.getBornArea();
        if (bornArea != null) {
            stmt.bindString(17, bornArea);
        }
 
        String birthPeriod = entity.getBirthPeriod();
        if (birthPeriod != null) {
            stmt.bindString(18, birthPeriod);
        }
 
        String bgLikeCount = entity.getBgLikeCount();
        if (bgLikeCount != null) {
            stmt.bindString(19, bgLikeCount);
        }
 
        String bgImage = entity.getBgImage();
        if (bgImage != null) {
            stmt.bindString(20, bgImage);
        }
        stmt.bindLong(21, entity.getAuthStatus());
 
        String resideArea = entity.getResideArea();
        if (resideArea != null) {
            stmt.bindString(22, resideArea);
        }
 
        String resideCity = entity.getResideCity();
        if (resideCity != null) {
            stmt.bindString(23, resideCity);
        }
        stmt.bindLong(24, entity.getBgLikeStatus());
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(25, realname);
        }
        stmt.bindLong(26, entity.getBusinessAuthStatus());
        stmt.bindLong(27, entity.getUnionLevel());
        stmt.bindLong(28, entity.getIsSetSecPassword());
        stmt.bindLong(29, entity.getContactsCount());
        stmt.bindLong(30, entity.getOrderCount());
        stmt.bindLong(31, entity.getIsStaff());
        stmt.bindLong(32, entity.getUnionCredit());
 
        String followCount = entity.getFollowCount();
        if (followCount != null) {
            stmt.bindString(33, followCount);
        }
 
        String fansCount = entity.getFansCount();
        if (fansCount != null) {
            stmt.bindString(34, fansCount);
        }
 
        String viewCount = entity.getViewCount();
        if (viewCount != null) {
            stmt.bindString(35, viewCount);
        }
 
        String inviteCount = entity.getInviteCount();
        if (inviteCount != null) {
            stmt.bindString(36, inviteCount);
        }
 
        String flowerCount = entity.getFlowerCount();
        if (flowerCount != null) {
            stmt.bindString(37, flowerCount);
        }
        stmt.bindLong(38, entity.getImpressionCount());
 
        String userAvatars = entity.getUserAvatars();
        if (userAvatars != null) {
            stmt.bindString(39, userAvatars);
        }
        stmt.bindLong(40, entity.getChairman());
        stmt.bindLong(41, entity.getUnionMerchant());
        stmt.bindLong(42, entity.getIsWelfare());
        stmt.bindLong(43, entity.getIsFruitToken());
        stmt.bindLong(44, entity.getValueLevel());
        stmt.bindLong(45, entity.getZoneVodDuration());
        stmt.bindLong(46, entity.getIsHost());
        stmt.bindLong(47, entity.getIsMaker());
 
        String showActivityUrl = entity.getShowActivityUrl();
        if (showActivityUrl != null) {
            stmt.bindString(48, showActivityUrl);
        }
        stmt.bindLong(49, entity.getVipStatus());
        stmt.bindLong(50, entity.getInviteUid());
        stmt.bindLong(51, entity.getMakerLevel());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUid());
        stmt.bindLong(2, entity.getStoreId());
 
        String hxname = entity.getHxname();
        if (hxname != null) {
            stmt.bindString(3, hxname);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
        stmt.bindLong(5, entity.getVipLevel());
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(6, company);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(7, position);
        }
        stmt.bindLong(8, entity.getGender());
 
        String bornDate = entity.getBornDate();
        if (bornDate != null) {
            stmt.bindString(9, bornDate);
        }
 
        String constellation = entity.getConstellation();
        if (constellation != null) {
            stmt.bindString(10, constellation);
        }
        stmt.bindLong(11, entity.getMobileVisible());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(12, avatar);
        }
        stmt.bindLong(13, entity.getIsSingle());
 
        String occupation = entity.getOccupation();
        if (occupation != null) {
            stmt.bindString(14, occupation);
        }
 
        String hobby = entity.getHobby();
        if (hobby != null) {
            stmt.bindString(15, hobby);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(16, mobile);
        }
 
        String bornArea = entity.getBornArea();
        if (bornArea != null) {
            stmt.bindString(17, bornArea);
        }
 
        String birthPeriod = entity.getBirthPeriod();
        if (birthPeriod != null) {
            stmt.bindString(18, birthPeriod);
        }
 
        String bgLikeCount = entity.getBgLikeCount();
        if (bgLikeCount != null) {
            stmt.bindString(19, bgLikeCount);
        }
 
        String bgImage = entity.getBgImage();
        if (bgImage != null) {
            stmt.bindString(20, bgImage);
        }
        stmt.bindLong(21, entity.getAuthStatus());
 
        String resideArea = entity.getResideArea();
        if (resideArea != null) {
            stmt.bindString(22, resideArea);
        }
 
        String resideCity = entity.getResideCity();
        if (resideCity != null) {
            stmt.bindString(23, resideCity);
        }
        stmt.bindLong(24, entity.getBgLikeStatus());
 
        String realname = entity.getRealname();
        if (realname != null) {
            stmt.bindString(25, realname);
        }
        stmt.bindLong(26, entity.getBusinessAuthStatus());
        stmt.bindLong(27, entity.getUnionLevel());
        stmt.bindLong(28, entity.getIsSetSecPassword());
        stmt.bindLong(29, entity.getContactsCount());
        stmt.bindLong(30, entity.getOrderCount());
        stmt.bindLong(31, entity.getIsStaff());
        stmt.bindLong(32, entity.getUnionCredit());
 
        String followCount = entity.getFollowCount();
        if (followCount != null) {
            stmt.bindString(33, followCount);
        }
 
        String fansCount = entity.getFansCount();
        if (fansCount != null) {
            stmt.bindString(34, fansCount);
        }
 
        String viewCount = entity.getViewCount();
        if (viewCount != null) {
            stmt.bindString(35, viewCount);
        }
 
        String inviteCount = entity.getInviteCount();
        if (inviteCount != null) {
            stmt.bindString(36, inviteCount);
        }
 
        String flowerCount = entity.getFlowerCount();
        if (flowerCount != null) {
            stmt.bindString(37, flowerCount);
        }
        stmt.bindLong(38, entity.getImpressionCount());
 
        String userAvatars = entity.getUserAvatars();
        if (userAvatars != null) {
            stmt.bindString(39, userAvatars);
        }
        stmt.bindLong(40, entity.getChairman());
        stmt.bindLong(41, entity.getUnionMerchant());
        stmt.bindLong(42, entity.getIsWelfare());
        stmt.bindLong(43, entity.getIsFruitToken());
        stmt.bindLong(44, entity.getValueLevel());
        stmt.bindLong(45, entity.getZoneVodDuration());
        stmt.bindLong(46, entity.getIsHost());
        stmt.bindLong(47, entity.getIsMaker());
 
        String showActivityUrl = entity.getShowActivityUrl();
        if (showActivityUrl != null) {
            stmt.bindString(48, showActivityUrl);
        }
        stmt.bindLong(49, entity.getVipStatus());
        stmt.bindLong(50, entity.getInviteUid());
        stmt.bindLong(51, entity.getMakerLevel());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getInt(offset + 0), // uid
            cursor.getInt(offset + 1), // storeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hxname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.getInt(offset + 4), // vipLevel
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // company
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // position
            cursor.getInt(offset + 7), // gender
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // bornDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // constellation
            cursor.getInt(offset + 10), // mobileVisible
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // avatar
            cursor.getInt(offset + 12), // isSingle
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // occupation
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // hobby
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // mobile
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // bornArea
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // birthPeriod
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // bgLikeCount
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // bgImage
            cursor.getInt(offset + 20), // authStatus
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // resideArea
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // resideCity
            cursor.getInt(offset + 23), // bgLikeStatus
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // realname
            cursor.getInt(offset + 25), // businessAuthStatus
            cursor.getInt(offset + 26), // unionLevel
            cursor.getInt(offset + 27), // isSetSecPassword
            cursor.getInt(offset + 28), // contactsCount
            cursor.getInt(offset + 29), // orderCount
            cursor.getInt(offset + 30), // isStaff
            cursor.getInt(offset + 31), // unionCredit
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // followCount
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // fansCount
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // viewCount
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // inviteCount
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // flowerCount
            cursor.getInt(offset + 37), // impressionCount
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // userAvatars
            cursor.getInt(offset + 39), // chairman
            cursor.getInt(offset + 40), // unionMerchant
            cursor.getInt(offset + 41), // isWelfare
            cursor.getInt(offset + 42), // isFruitToken
            cursor.getInt(offset + 43), // valueLevel
            cursor.getInt(offset + 44), // zoneVodDuration
            cursor.getInt(offset + 45), // isHost
            cursor.getInt(offset + 46), // isMaker
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // showActivityUrl
            cursor.getInt(offset + 48), // vipStatus
            cursor.getInt(offset + 49), // inviteUid
            cursor.getInt(offset + 50) // makerLevel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUid(cursor.getInt(offset + 0));
        entity.setStoreId(cursor.getInt(offset + 1));
        entity.setHxname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVipLevel(cursor.getInt(offset + 4));
        entity.setCompany(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPosition(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGender(cursor.getInt(offset + 7));
        entity.setBornDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setConstellation(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMobileVisible(cursor.getInt(offset + 10));
        entity.setAvatar(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsSingle(cursor.getInt(offset + 12));
        entity.setOccupation(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setHobby(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMobile(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBornArea(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBirthPeriod(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBgLikeCount(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBgImage(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setAuthStatus(cursor.getInt(offset + 20));
        entity.setResideArea(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setResideCity(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setBgLikeStatus(cursor.getInt(offset + 23));
        entity.setRealname(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setBusinessAuthStatus(cursor.getInt(offset + 25));
        entity.setUnionLevel(cursor.getInt(offset + 26));
        entity.setIsSetSecPassword(cursor.getInt(offset + 27));
        entity.setContactsCount(cursor.getInt(offset + 28));
        entity.setOrderCount(cursor.getInt(offset + 29));
        entity.setIsStaff(cursor.getInt(offset + 30));
        entity.setUnionCredit(cursor.getInt(offset + 31));
        entity.setFollowCount(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setFansCount(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setViewCount(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setInviteCount(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setFlowerCount(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setImpressionCount(cursor.getInt(offset + 37));
        entity.setUserAvatars(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setChairman(cursor.getInt(offset + 39));
        entity.setUnionMerchant(cursor.getInt(offset + 40));
        entity.setIsWelfare(cursor.getInt(offset + 41));
        entity.setIsFruitToken(cursor.getInt(offset + 42));
        entity.setValueLevel(cursor.getInt(offset + 43));
        entity.setZoneVodDuration(cursor.getInt(offset + 44));
        entity.setIsHost(cursor.getInt(offset + 45));
        entity.setIsMaker(cursor.getInt(offset + 46));
        entity.setShowActivityUrl(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setVipStatus(cursor.getInt(offset + 48));
        entity.setInviteUid(cursor.getInt(offset + 49));
        entity.setMakerLevel(cursor.getInt(offset + 50));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(User entity, long rowId) {
        return entity.getUid();
    }
    
    @Override
    public Integer getKey(User entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
